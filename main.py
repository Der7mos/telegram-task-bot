import os
import telebot
import sqlite3
import threading
import time
from telebot import types

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ['BOT_TOKEN']
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('tasks.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    text TEXT,
    remind_at INTEGER
)
''')
conn.commit()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('/add', '/list')
    markup.row('/delete', '/remind')
    bot.send_message(message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç–∞—Å–∫-–±–æ—Ç ‚úÖ\n\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ ID\n"
        "/remind ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        reply_markup=markup
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á
@bot.message_handler(commands=['add'])
def add_task(message):
    task_text = message.text[5:].strip()
    if not task_text:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π:\n/add –ó–∞–¥–∞—á–∞ 1; –ó–∞–¥–∞—á–∞ 2\n–∏–ª–∏\n/add\n–ó–∞–¥–∞—á–∞ 1\n–ó–∞–¥–∞—á–∞ 2")
        return
    tasks = [t.strip() for t in task_text.replace('\n', ';').split(';') if t.strip()]
    for task in tasks:
        cursor.execute("INSERT INTO tasks (user_id, text, remind_at) VALUES (?, ?, ?)",
                       (message.chat.id, task, None))
    conn.commit()
    bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏:\n‚Ä¢ " + "\n‚Ä¢ ".join(tasks))

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@bot.message_handler(commands=['list'])
def list_tasks(message):
    cursor.execute("SELECT id, text FROM tasks WHERE user_id=?", (message.chat.id,))
    tasks = cursor.fetchall()
    if not tasks:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        response = "\n".join([f"{task[0]}. {task[1]}" for task in tasks])
        bot.send_message(message.chat.id, response)

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á
@bot.message_handler(commands=['delete'])
def delete_tasks(message):
    try:
        ids = list(map(int, message.text.split()[1:]))
        for task_id in ids:
            cursor.execute("DELETE FROM tasks WHERE id=? AND user_id=?", (task_id, message.chat.id))
        conn.commit()
        bot.send_message(message.chat.id, f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏: {', '.join(map(str, ids))}")
    except:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /delete ID1 ID2 ...")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–∞–¥–∞—á–∞–º
@bot.message_handler(commands=['remind'])
def remind_tasks(message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        delay_minutes = int(parts[-1])
        ids = list(map(int, parts[1:-1]))
        remind_time = int(time.time()) + delay_minutes * 60
        for task_id in ids:
            cursor.execute("UPDATE tasks SET remind_at=? WHERE id=? AND user_id=?",
                           (remind_time, task_id, message.chat.id))
        conn.commit()
        bot.send_message(message.chat.id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω –¥–ª—è –∑–∞–¥–∞—á: {', '.join(map(str, ids))}")
    except:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: /remind ID1 ID2 ... –º–∏–Ω—É—Ç—ã")

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def reminder_loop():
    while True:
        now = int(time.time())
        cursor.execute("SELECT id, user_id, text FROM tasks WHERE remind_at IS NOT NULL AND remind_at <= ?", (now,))
        tasks = cursor.fetchall()
        for task in tasks:
            bot.send_message(task[1], f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task[2]}")
            cursor.execute("UPDATE tasks SET remind_at=NULL WHERE id=?", (task[0],))
        conn.commit()
        time.sleep(30)

# –ó–∞–ø—É—Å–∫
threading.Thread(target=reminder_loop, daemon=True).start()
bot.polling()
